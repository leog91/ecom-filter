import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState, useEffect, useCallback } from "react";
import productsJSON from "../product/miista-export.json";
import { colors, categories } from "../utils/util";

export default function Home() {
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [page, setPage] = useState(0);
  const [priceRange, setPriceRange] = useState({
    from: 0,
    to: Number.MAX_SAFE_INTEGER,
  });
  const [filters, setFilters] = useState({
    byPrice: null,
    byColor: null,
    byCategories: null,
  });
  const [filterPanel, setFilterPanel] = useState(false);

  useEffect(() => {
    const filterByPrice = (ps) => {
      if (filters.byPrice) {
        return ps.filter((p) =>
          p.node.shopifyProductEu.variants.edges.some(
            (e) =>
              Number(e.node.price) > filters.byPrice.from &&
              Number(e.node.price) < filters.byPrice.to
          )
        );
      }

      return ps;
    };

    const filterByColor = (ps) => {
      if (filters.byColor) {
        return ps.filter(
          (p) =>
            p.node.colorFamily &&
            p.node.colorFamily.some((c) => c.name === filters.byColor)
        );
      }

      return ps;
    };
    const filterByCategories = (ps) => {
      if (filters.byCategories) {
        return ps.filter(
          (p) =>
            p.node.categoryTags &&
            p.node.categoryTags.some((c) => c === filters.byCategories)
        );
      }
      return ps;
    };
    const applyFilters = () => {
      setPage(0);
      setFilteredProducts(
        filterByCategories(filterByColor(filterByPrice(products)))
      );
    };

    //fetch simulation
    async function fetchProducts() {
      setProducts(productsJSON.data.allContentfulProductPage.edges);
      applyFilters();
    }
    fetchProducts();
  }, [products, filters]);

  return (
    <div className={styles.container}>
      <Head>
        <title>e-com filter</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={`${styles.filterButton} ${styles.filterElement}`}>
          <div onClick={() => setFilterPanel(!filterPanel)}>FILTERS</div>
        </div>

        {filterPanel && (
          <div className={styles.filterPanel}>
            <div className={styles.flex}>
              <strong
                onClick={() => setFilterPanel(false)}
                className={styles.closeFilter}
              >
                X
              </strong>
            </div>
            <strong>Colour</strong>
            <div className={styles.colorFilter}>
              {colors.map((c) => (
                <div
                  className={styles.filterElement}
                  key={c}
                  onClick={() => setFilters({ ...filters, byColor: c })}
                >
                  {c}
                </div>
              ))}
            </div>
            <strong>Category</strong>
            <div className={styles.cagetoryFilter}>
              {categories.map((c) => (
                <div
                  key={c}
                  className={styles.filterElement}
                  onClick={() => setFilters({ ...filters, byCategories: c })}
                >
                  {c}
                </div>
              ))}
            </div>
            <div className={styles.priceFilter}>
              <input
                placeholder="from"
                onChange={(e) =>
                  setPriceRange({ ...priceRange, from: e.target.value })
                }
                type="number"
              ></input>
              <input
                placeholder="to"
                onChange={(e) =>
                  setPriceRange({ ...priceRange, to: e.target.value })
                }
                type="number"
              ></input>
              <button
                className={styles.button}
                onClick={() => {
                  setFilters({
                    ...filters,
                    byPrice: {
                      from: priceRange.from ? priceRange.from : 0,
                      to: priceRange.to
                        ? priceRange.to
                        : Number.MAX_SAFE_INTEGER,
                    },
                  });
                }}
              >
                search
              </button>
            </div>
          </div>
        )}

        <div>
          Page {page / 12} of {Math.floor(filteredProducts.length / 12)}
          <div className={styles.paginationButtons}>
            {
              <button
                className={styles.button}
                disabled={page === 0}
                onClick={() => setPage(page - 12)}
              >
                previous
              </button>
            }
            {
              <button
                className={styles.button}
                disabled={page / 12 >= Math.floor(filteredProducts.length / 12)}
                onClick={() => setPage(page + 12)}
              >
                next
              </button>
            }

            <button
              className={styles.button}
              onClick={() =>
                setFilters({
                  byPrice: null,
                  byColor: null,
                  byCategories: null,
                })
              }
            >
              clear filters
            </button>
          </div>
        </div>

        <div className={styles.grid}>
          {filteredProducts.slice(page, page + 12).map((p) => (
            <div key={p.node.name}>
              <Image
                src={"http:".concat(p.node.thumbnailImage.file.url)}
                alt="Vercel Logo"
                width={398}
                height={398}
              />
              <div className={styles.flex}>
                <div>{p.node.name}</div>
                <div className={styles.price}>
                  {p.node.shopifyProductEu.variants.edges[0].node.price}
                </div>
              </div>
            </div>
          ))}
        </div>
      </main>
      <footer className={styles.footer}>All right reserved</footer>
    </div>
  );
}
